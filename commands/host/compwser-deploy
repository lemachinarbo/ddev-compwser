#!/usr/bin/env bash
#ddev-generated
## Description: Orchestrates all setup and deployment steps for ComPWser with user confirmation and environment selection
## Usage: compwser-deploy [ENV]

set -euo pipefail
trap 'log_error "Command \"$BASH_COMMAND\" failed at line $LINENO"; exit 1' ERR

# Source common logging/colors and helpers
source "$(dirname "$0")/lib/common.sh"

log_header "Welcome to the ComPWser Environment Setup tool"
log_info "This script will guide you through setting up your environment for automated deployments."
log_hr

# Requirements check
log_header "Checking for requirements:"
REQUIREMENTS_OK=true

if [ ! -f "$ENV_FILE" ]; then
    log_error ".env file not found at $ENV_FILE. Aborting."
    exit 1
fi
log_ok ".env file found at $ENV_FILE."

GITHUB_OWNER="$(get_env_var "" GITHUB_OWNER "$ENV_FILE")"
GITHUB_REPO="$(get_env_var "" GITHUB_REPO "$ENV_FILE")"
if [ -z "$GITHUB_OWNER" ] || [ -z "$GITHUB_REPO" ]; then
    log_error "GITHUB_OWNER or GITHUB_REPO not set in .env. Please set these variables and try again."
    exit 1
fi

if command -v gh >/dev/null 2>&1; then
    log_ok "GitHub CLI (gh) is installed."
    HAS_GH=true
else
    log_error "GitHub CLI (gh) is not installed."
    HAS_GH=false
    REQUIREMENTS_OK=false
fi

if [ "$HAS_GH" = true ]; then
    if ! gh repo view "$GITHUB_OWNER/$GITHUB_REPO" >/dev/null 2>&1; then
        log_error "Repository $GITHUB_OWNER/$GITHUB_REPO not found or you do not have access. Please check your .env file, repo visibility, and GitHub permissions."
        REQUIREMENTS_OK=false
    else
        log_ok "Repository $GITHUB_OWNER/$GITHUB_REPO found and accessible."
        BRANCHES=($(gh api repos/$GITHUB_OWNER/$GITHUB_REPO/branches --jq '.[].name'))
        if [ ${#BRANCHES[@]} -eq 0 ]; then
            log_error "Repository $GITHUB_OWNER/$GITHUB_REPO has no branches. Please create a main branch and push it to GitHub before running this script."
            REQUIREMENTS_OK=false
        fi
    fi
fi

if [ -f "$HOME/.ssh/id_ed25519" ]; then
    log_ok "Personal SSH key (id_ed25519) found."
    HAS_PERSONAL_KEY=true
else
    log_error "Personal SSH key (id_ed25519) not found."
    HAS_PERSONAL_KEY=false
    REQUIREMENTS_OK=false
fi

if [ -f "$HOME/.ssh/id_github" ]; then
    log_ok "Project SSH key (id_github) found."
    HAS_PROJECT_KEY=true
else
    log_error "Project SSH key (id_github) not found."
    HAS_PROJECT_KEY=false
    REQUIREMENTS_OK=false
fi

if [ ! -f "$HOME/.ssh/id_ed25519" ] || [ ! -f "$HOME/.ssh/id_github" ]; then
    log_warn "One or both SSH keys are missing."
    log_info "SSH keys are required for secure and passwordless access for automated deployments."
    log_ask "Generate the missing SSH keys now? [Y/n]: "
    read gen_keys
    gen_keys=${gen_keys:-y}
    if [[ $gen_keys =~ ^[Yy]$ ]]; then
        ddev sshkeys-generate || { log_error "SSH key generation failed!"; exit 1; }
    fi
    # Re-check for keys after generation
    if [ -f "$HOME/.ssh/id_ed25519" ] && [ -f "$HOME/.ssh/id_github" ]; then
        log_ok "SSH keys generated and found."
        REQUIREMENTS_OK=true
    else
        log_error "SSH key generation failed or keys still missing. Aborting."
        exit 1
    fi
fi

if [ "$REQUIREMENTS_OK" = false ]; then
    log_fatal "Some requirements are missing or invalid. Please fix them and rerun the script."
    exit 1
fi

log_success "All requirements met. Let's start environment setup.\n"

ENVIRONMENTS=$(get_env_environments)
if [ -z "$ENVIRONMENTS" ]; then
    log_error "No ENVIRONMENTS variable found in .env. Please define it (e.g., ENVIRONMENTS=\"PROD STAGING TESTING\")."
    exit 1
fi
resolve_environment "${1:-}" "$ENVIRONMENTS"
ENV="$SELECTED_ENV"
PREFIX="${ENV}_"


echo
log_header "Installing SSH Keys"
log_info "Allows automated deployments with passwordless SSH access."
log_hr
log_ask "Install keys now? [Y/n]: "
read yn0
yn0=${yn0:-y}
if [[ $yn0 =~ ^[Yy]$ ]]; then
    ddev sshkeys-install "$ENV" && log_success "SSH key installation and authentication test complete." || { log_error "SSH key installation failed!"; exit 1; }
else
    log_warn "Skipping SSH key installation."
fi

echo
log_header "GitHub Actions Setup"
log_info "Automated deployment requires secrets and variables set in the GitHub $ENV environment"
log_hr
log_ask "Run GitHub Actions setup? [Y/n]: "
read yn1
yn1=${yn1:-y}
if [[ $yn1 =~ ^[Yy]$ ]]; then
    ddev github-env "$ENV" && log_success "All GitHub Actions variables and secrets have been processed successfully." || { log_error "GitHub setup failed!"; exit 1; }
else
    log_warn "Skipping GitHub Actions setup."
fi

echo
log_header "GitHub Workflows Setup"
log_info "To trigger automated deployments, link a branch to the $ENV environment in GitHub."
log_hr
log_ask "Select branch now? [Y/n]: "
read yn1_5
yn1_5=${yn1_5:-y}
if [[ $yn1_5 =~ ^[Yy]$ ]]; then
    ddev github-workflow "$ENV" && log_success "GitHub Actions workflow files generated successfully." || { log_error "Workflow file generation failed!"; exit 1; }
else
    log_warn "Skipping GitHub Actions workflow file generation."
fi

echo
log_header "Config File Setup"
log_info "To separate local and production settings, your config.php will be split, creating a config-local.php for environment-specific overrides."
log_hr
log_ask "Create config-local.php? [Y/n]: "
read yn2
yn2=${yn2:-y}
if [[ $yn2 =~ ^[Yy]$ ]]; then
    ddev config-split "$ENV" && log_success "config-local setup complete." || { log_error "config-local.php setup failed!"; exit 1; }
else
    log_warn "Skipping config-local.php setup."
fi

echo
log_header "File Sync"
log_info "To deploy your site, all project files need to be uploaded and synced to the $ENV server."
log_hr
log_ask "Sync files and deploy to server? [Y/n]: "
read yn3
yn3=${yn3:-y}
if [[ $yn3 =~ ^[Yy]$ ]]; then
    ddev sync "$ENV" && log_ok "File sync complete." || { log_error "File sync failed!"; exit 1; }
else
    log_warn "Skipping file sync."
fi

echo
log_header "Database Import"
log_info "Import local database to $ENV server to run the site."
log_hr
log_ask "Import now? [Y/n]: "
read yn4
yn4=${yn4:-y}
if [[ $yn4 =~ ^[Yy]$ ]]; then
    REMOTE_USER="$(get_env_var "$PREFIX" SSH_USER "$ENV_FILE")"
    REMOTE_HOST="$(get_env_var "$PREFIX" SSH_HOST "$ENV_FILE")"
    REMOTE_PATH="$(get_env_var "$PREFIX" PATH "$ENV_FILE")"
    DB_NAME="$(get_env_var "$PREFIX" DB_NAME "$ENV_FILE")"
    DB_USER="$(get_env_var "$PREFIX" DB_USER "$ENV_FILE")"
    DB_PASS="$(get_env_var "$PREFIX" DB_PASS "$ENV_FILE")"
    if [ -z "$REMOTE_USER" ] || [ -z "$REMOTE_HOST" ] || [ -z "$REMOTE_PATH" ] || [ -z "$DB_NAME" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASS" ]; then
        log_error "One or more required variables (SSH_USER, SSH_HOST, DEPLOY_PATH, DB_NAME, DB_USER, DB_PASS) are empty. Check your .env file for all required variables."
        exit 1
    fi
    ssh -i "$HOME/.ssh/id_github" "$REMOTE_USER@$REMOTE_HOST" "cd $REMOTE_PATH && mysql -u$DB_USER -p'$DB_PASS' $DB_NAME < site/assets/backups/database/db.sql" && log_ok "Database import complete." || log_error "Database import failed!"
else
    log_warn "Skipping database import."
fi

echo
log_header "Environment Folder Structure"
log_info "A new folder structure is required on the $ENV server for multi-version deployments."
log_hr
log_ask "Update folder structure? [Y/n]: "
read yn5
yn5=${yn5:-y}
if [[ $yn5 =~ ^[Yy]$ ]]; then
    REMOTE_USER="$(get_env_var "$PREFIX" SSH_USER "$ENV_FILE")"
    REMOTE_HOST="$(get_env_var "$PREFIX" SSH_HOST "$ENV_FILE")"
    REMOTE_PATH="$(get_env_var "$PREFIX" PATH "$ENV_FILE")"
    if [ -z "$REMOTE_USER" ] || [ -z "$REMOTE_HOST" ] || [ -z "$REMOTE_PATH" ]; then
        log_error "One or more required variables (SSH_USER, SSH_HOST, DEPLOY_PATH) are empty. Check your .env file for ${ENV}_SSH_USER, ${ENV}_SSH_HOST, and ${ENV}_PATH."
        exit 1
    fi
    ssh -i "$HOME/.ssh/id_github" "$REMOTE_USER@$REMOTE_HOST" "cd $REMOTE_PATH && php RockShell/rock rm:transform && find . -type d -exec chmod 755 {} \; && find . -type f -exec chmod 644 {} \;"
    log_ok "Server file structure updated and permissions set: directories=755, files=644."
else
    log_warn "Skipping server file structure update and permissions fix."
fi

echo
log_success "All selected steps completed!"
log_info "Reminder: Commit and push your changes to the repository to test the deployment workflows."