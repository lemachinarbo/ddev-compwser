#!/usr/bin/env bash
#ddev-generated
## Description: Automate all setup and deployment steps for publishing your site to any environment
## Usage: cpw-deploy [ENV]

set -euo pipefail
trap 'log_error "Command \"$BASH_COMMAND\" failed at line $LINENO"; exit 1' ERR

# Source common logging/colors and helpers
source "$(dirname "$0")/lib/common.sh"

if [[ "${1:-}" == "--help" ]]; then
    echo "cpw-deploy: Orchestrates all setup and deployment steps for comPWser."
    echo "Usage: ddev cpw-deploy [ENV]"
    exit 0
fi

for arg in "$@"; do
  if [[ "$arg" == "--lazy" ]]; then
    LAZY_MODE=true
  fi
  # Remove --lazy from positional args
  if [[ "$arg" == "--lazy" ]]; then
    set -- "${@/--lazy/}"
  fi
  break
done    

default_answer() {
  local prompt="$1"
  local default="$2"
  echo "$prompt" "$default"
}

main() {
    log_header "Welcome to the comPWser Environment Setup tool"
    log_info "This script will guide you through setting up your environment for automated deployments."
    check_requirements
    setup_env_vars "$@"
    setup_ssh_keys
    check_git_remote_and_branch
    setup_github_actions
    setup_github_workflows
    setup_config_files
    sync_files
    import_database
    run_transform
    echo
    log_success "All selected steps completed!"
    log_info "Reminder: Commit and push your changes to the repository to test the deployment workflows."
}

check_requirements(){
    echo
    log_info "Checking for requirements:"
    REQUIREMENTS_OK=true
    check_bash_version
    get_github_env_vars
    check_env_file_exists
    check_env_placeholders
    check_github_cli
    check_github_repo
    check_ssh_keys
    check_generate_ssh_keys_if_missing
    if [ "$REQUIREMENTS_OK" = false ]; then
        log_fatal "Some requirements are missing or invalid. Please fix them and rerun the script."
        exit 1
    fi
    log_success "All requirements met. Let's start environment setup.\n"
}

check_git_remote_and_branch() {
    REMOTE_URL="git@github.com:$GITHUB_OWNER/$GITHUB_REPO.git"
    log_header "Git Repository Initialization"
    log_info "Setting git remote and initializing repository if needed."
    ask_user "Initialize remote repository? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if ! git remote get-url origin >/dev/null 2>&1; then
            git remote add origin "$REMOTE_URL"
        else
            git remote set-url origin "$REMOTE_URL"
            log_info "Remote 'origin' already exists. Set to SSH URL."
        fi
        git fetch origin main >/dev/null 2>&1 || true
        # Check if remote branch exists, create if missing
        if [ "$(git ls-remote origin main | wc -l)" -eq 0 ]; then
            log_info "Remote 'main' branch is empty or missing. Initializing with an empty commit."
            git commit --allow-empty -m "Initial commit"
            if ! ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
                log_warn "SSH authentication to GitHub failed. Attempting to add your public key automatically..."
                if gh ssh-key add "$HOME/.ssh/id_ed25519.pub" --title "Github deployment key"; then
                    log_ok "SSH key added to your GitHub account."
                else
                    log_error "Failed to add SSH key automatically. Please add it manually at: https://github.com/settings/ssh/new"
                fi
            fi
            git push -u origin main
        else
            log_warn "Remote 'main' branch has content."
            # Check if local branch is tracking remote
            if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then
                git branch --set-upstream-to=origin/main main
                log_info "Set local branch 'main' to track 'origin/main'."
            fi
        fi
    else
        log_warn "Skipped git remote setup and repository initialization. You may encounter authentication issues or workflow errors until the remote is initialized."
    fi
}


setup_env_vars() {
    ENVIRONMENTS=$(get_env_environments)
    if [ -z "$ENVIRONMENTS" ]; then
        log_fatal "No ENVIRONMENTS variable found in .env. Please define it (e.g., ENVIRONMENTS=\"PROD STAGING TESTING\")."
        exit 1
    fi
    resolve_environment "${1:-}" "$ENVIRONMENTS"
    ENV="$SELECTED_ENV"
    PREFIX="${ENV}_"
    REMOTE_USER="$(get_env_var "$PREFIX" SSH_USER "$ENV_FILE")"
    REMOTE_HOST="$(get_env_var "$PREFIX" SSH_HOST "$ENV_FILE")"
    REMOTE_PATH="$(get_env_var "$PREFIX" PATH "$ENV_FILE")"
    PW_PATH="$(get_env_var "" PW_ROOT "$ENV_FILE")"
    DB_NAME="$(get_env_var "$PREFIX" DB_NAME "$ENV_FILE")"
    DB_USER="$(get_env_var "$PREFIX" DB_USER "$ENV_FILE")"
    DB_PASS="$(get_env_var "$PREFIX" DB_PASS "$ENV_FILE")"
}

setup_ssh_keys() {
    log_header "Installing SSH Keys"
    log_info "Allows automated deployments with passwordless SSH access."
    ask_user "Install keys now? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ddev cpw-sshkeys-install "$ENV" && log_success "SSH key installation and authentication test complete." || { log_error "SSH key installation failed!"; exit 1; }
    else
        log_warn "Skipping SSH key installation."
    fi
}

setup_github_actions() {
    log_header "GitHub Actions Setup"
    log_info "Automated deployment requires secrets and variables set in the GitHub $ENV environment"
    ask_user "Run GitHub Actions setup? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ddev cpw-gh-env "$ENV" && log_success "All GitHub Actions variables and secrets have been processed successfully." || { log_error "GitHub setup failed!"; exit 1; }
    else
        log_warn "Skipping GitHub Actions setup."
    fi
}

setup_github_workflows() {
    log_header "GitHub Workflows Setup"
    log_info "To trigger automated deployments, link a branch to the $ENV environment in GitHub."
    ask_user "Select branch now? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ddev cpw-gh-workflow "$ENV" && log_success "GitHub Actions workflow files generated successfully." || { log_error "Workflow file generation failed!"; exit 1; }
    else
        log_warn "Skipping GitHub Actions workflow file generation."
    fi
}

setup_config_files() {
    log_header "Config File Setup"
    log_info "To separate local and production settings, your config.php will be split, creating a config-local.php for environment-specific overrides."
    ask_user "Create config-local.php? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ddev cpw-config-split "$ENV" && log_success "config-local setup complete." || { log_error "config-local.php setup failed!"; exit 1; }
    else
        log_warn "Skipping config-local.php setup."
    fi
}

sync_files() {
    log_header "File Sync"
    log_info "To deploy your site, all project files need to be uploaded and synced to the $ENV server."
    ask_user "Sync files and deploy to server? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ddev cpw-sync "$ENV" && log_ok "File sync complete." || { log_error "File sync failed!"; exit 1; }
    else
        log_warn "Skipping file sync."
    fi
}

import_database() {
    log_header "Database Import"
    log_info "Import local database to $ENV server to run the site."
    ask_user "Import now? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [ -z "$REMOTE_USER" ] || [ -z "$REMOTE_HOST" ] || [ -z "$REMOTE_PATH" ] || [ -z "$DB_NAME" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASS" ]; then
            log_fatal "One or more required variables (SSH_USER, SSH_HOST, DEPLOY_PATH, DB_NAME, DB_USER, DB_PASS) are empty. Check your .env file for all required variables."
            exit 1
        fi
        
        # Get SSH key name from .env or use default
        local ssh_key_name="$(get_env_var "" SSH_KEY "$ENV_FILE")"
        if [ -z "$ssh_key_name" ]; then
            ssh_key_name="id_github"
        fi
        local ssh_key_path="$HOME/.ssh/$ssh_key_name"
        
        # Use PW_ROOT if set, else default to empty string
        local pw_root="${PW_PATH:-}"
        local db_sql_path="${pw_root:+$pw_root/}site/assets/backups/database/db.sql"
        ssh -i "$ssh_key_path" "$REMOTE_USER@$REMOTE_HOST" "cd $REMOTE_PATH && mysql -u$DB_USER -p'$DB_PASS' $DB_NAME < $db_sql_path" \
            && log_ok "Local DB imported as '$DB_NAME' in $ENV environment ($REMOTE_HOST)." \
            || log_error "Database import failed!"
    else
        log_warn "Skipping database import."
    fi
}

run_transform() {
    log_header "Environment Folder Structure"
    log_info "A new folder structure is required on the $ENV server for multi-version deployments."
    ask_user "Update folder structure? [Y/n]: "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ddev cpw-transform "$ENV" && log_ok "Server file structure updated and permissions set: directories=755, files=644." || { log_error "Folder structure update failed!"; exit 1; }
    else
        log_warn "Skipping server file structure update and permissions fix."
    fi
}

check_env_placeholders() {
    local env_file="$ENV_FILE"
    local placeholders=(
        "your-github-username-or-org"
        "your-repo-name"
        "your-github-personal-access-token"
        "your-ssh-host"
        "your-ssh-user"
        "yourdomain.com"
    )
    for value in "${placeholders[@]}"; do
        # Only check non-commented lines for placeholders
        if grep -v '^#' "$env_file" | grep -q "$value"; then
            log_fatal ".env file contains default template value '$value'. Please update .env with your actual project/server info before continuing."
            exit 1
        fi
    done
}

check_github_cli() {
    if command -v gh >/dev/null 2>&1; then
        log_ok "GitHub CLI (gh) is installed."
        HAS_GH=true
    else
        log_error "GitHub CLI (gh) is not installed."
        HAS_GH=false
        REQUIREMENTS_OK=false
    fi
}

check_github_repo() {
    if [ "$HAS_GH" = true ]; then
        if ! gh repo view "$GITHUB_OWNER/$GITHUB_REPO" >/dev/null 2>&1; then
            log_fatal "Repository $GITHUB_OWNER/$GITHUB_REPO not found or you do not have access. Please check your .env file, repo visibility, and GitHub permissions."
            REQUIREMENTS_OK=false
        else
            log_ok "Repository $GITHUB_OWNER/$GITHUB_REPO found and accessible."
        fi
    fi
}

check_ssh_keys() {
    # Get SSH key name from .env or use default
    local ssh_key_name="$(get_env_var "" SSH_KEY "$ENV_FILE")"
    if [ -z "$ssh_key_name" ]; then
        ssh_key_name="id_github"
    fi
    local project_key_path="$HOME/.ssh/$ssh_key_name"
    
    if [ -f "$HOME/.ssh/id_ed25519" ]; then
        log_ok "Personal SSH key (id_ed25519) found."
        HAS_PERSONAL_KEY=true
    else
        log_error "Personal SSH key (id_ed25519) not found."
        HAS_PERSONAL_KEY=false
        REQUIREMENTS_OK=false
    fi

    if [ -f "$project_key_path" ]; then
        log_ok "Project SSH key ($ssh_key_name) found."
        HAS_PROJECT_KEY=true
    else
        log_error "Project SSH key ($ssh_key_name) not found."
        HAS_PROJECT_KEY=false
        REQUIREMENTS_OK=false
    fi
}

check_generate_ssh_keys_if_missing() {
    # Get SSH key name from .env or use default
    local ssh_key_name="$(get_env_var "" SSH_KEY "$ENV_FILE")"
    if [ -z "$ssh_key_name" ]; then
        ssh_key_name="id_github"
    fi
    local project_key_path="$HOME/.ssh/$ssh_key_name"
    
    if [ ! -f "$HOME/.ssh/id_ed25519" ] || [ ! -f "$project_key_path" ]; then
        log_warn "One or both SSH keys are missing."
        log_info "SSH keys are required for secure and passwordless access for automated deployments."
        log_ask "Generate the missing SSH keys now? [Y/n]: "
        read gen_keys
        gen_keys=${gen_keys:-y}
        if [[ $gen_keys =~ ^[Yy]$ ]]; then
            ddev cpw-sshkeys-gen || { log_fatal "SSH key generation failed!"; exit 1; }
        fi
        # Re-check for keys after generation
        if [ -f "$HOME/.ssh/id_ed25519" ] && [ -f "$project_key_path" ]; then
            log_ok "SSH keys generated and found."
            REQUIREMENTS_OK=true
        else
            log_fatal "SSH key generation failed or keys still missing. Aborting."
            exit 1
        fi
    fi
}

check_bash_version() {
    local bash_version="${BASH_VERSION%%.*}"
    if (( bash_version >= 4 )); then
        log_ok "Bash $BASH_VERSION found (bash 4+ detected)."
    else
        log_warn "Bash $BASH_VERSION found (bash $bash_version detected) - running in compatibility mode, let's cross fingers! 🤞"
    fi
}

get_github_env_vars() {
    GITHUB_OWNER="$(get_env_var "" GITHUB_OWNER "$ENV_FILE")"
    GITHUB_REPO="$(get_env_var "" GITHUB_REPO "$ENV_FILE")"
    if [ -z "$GITHUB_OWNER" ] || [ -z "$GITHUB_REPO" ]; then
        log_fatal "GITHUB_OWNER or GITHUB_REPO not set in .env. Please set these variables and try again."
        exit 1
    fi
}


main "$@"