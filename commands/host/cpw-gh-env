#!/usr/bin/env bash
#ddev-generated
## Description: Automates setup of GitHub Actions repository variables and secrets for deployment using GitHub CLI (gh), with multi-environment support
## Usage: cpw-gh-env [ENV]

set -euo pipefail
trap 'log_error "Command \"$BASH_COMMAND\" failed at line $LINENO"; exit 1' ERR

# Source common logging/colors and helpers
source "$(dirname "$0")/lib/common.sh"

if [[ "${1:-}" == "--help" ]]; then
    echo "cpw-gh-env: Automates setup of GitHub Actions repository variables and secrets for deployment."
    echo "Usage: ddev cpw-gh-env [ENV]"
    exit 0
fi

main() {
    check_gh_cli
    check_gh_auth
    load_env_vars "$@"
    check_required_vars
    setup_known_hosts
    check_repo_access
    summary
    upload_github_secrets_and_vars
}

check_gh_cli() {
    if ! command -v gh >/dev/null 2>&1; then
        log_error "GitHub CLI (gh) is not installed or not in your PATH. Please install it and rerun this script.\nIf gh is not installed, visit https://github.com/cli/cli#installation for installation instructions."
        exit 1
    fi
}

check_gh_auth() {
    if ! gh auth status >/dev/null 2>&1; then
        log_error "GitHub CLI (gh) is not authenticated. Please run 'gh auth login' to authenticate, and ensure you have access to the repository."
        exit 1
    fi
}

load_env_vars() {
    load_standard_env_vars "$@"
    load_ssh_vars
    load_github_vars
    load_remote_vars
    
    # Handle SSH key path
    if [ -n "$SSH_KEY_NAME" ]; then
        if [[ "$SSH_KEY_NAME" == */* ]]; then
            SSH_KEY_PATH="$SSH_KEY_NAME"
        else
            SSH_KEY_PATH="$HOME/.ssh/$SSH_KEY_NAME"
        fi
    else
        SSH_KEY_PATH="$HOME/.ssh/id_github"
    fi
    
    if [ ! -f "$SSH_KEY_PATH" ]; then
        log_ask "SSH private key not found at $SSH_KEY_PATH. Enter path to your SSH private key: "
        read -r SSH_KEY_PATH
    fi
    if [ ! -f "$SSH_KEY_PATH" ]; then
        log_error "SSH key not found at $SSH_KEY_PATH. Aborting."
        exit 1
    fi
    SSH_KEY_CONTENT=$(cat "$SSH_KEY_PATH")
}

check_required_vars() {
    for var in SSH_HOST SSH_USER REMOTE_PATH GITHUB_OWNER GITHUB_REPO; do
        value="$(eval echo \$$var)"
        env_var="${PREFIX}${var}"
        if [ -z "$value" ]; then
            log_error "$var is not set (expected env variable: $env_var) in your .env file. Please check your .env file."
            exit 1
        fi
    done
}

setup_known_hosts() {
    if [ -z "$SSH_HOST" ]; then
        log_ask "Required value SSH_HOST (your SSH host) missing from .env. Enter your SSH_HOST (e.g. example.com): "
        read -r SSH_HOST
    fi
    if [ -z "$SSH_HOST" ]; then
        log_error "Required value SSH_HOST (your SSH host) missing from .env. Aborting."
        exit 1
    fi
    KNOWN_HOSTS=$(ssh-keyscan "$SSH_HOST" 2>/dev/null)
    if [ -z "$KNOWN_HOSTS" ]; then
        log_error "Could not generate KNOWN_HOSTS for $SSH_HOST. Aborting."
        exit 1
    fi
}

check_repo_access() {
    REPO_FULL="$GITHUB_OWNER/$GITHUB_REPO"
    if ! gh repo view "$REPO_FULL" >/dev/null 2>&1; then
        log_error "Cannot access GitHub repository $REPO_FULL. Please check the repository name and your permissions."
        exit 1
    fi
}

summary() {
    log_info "\nSummary of values to be uploaded to GitHub:"
    log_info "- SSH_KEY: $SSH_KEY_PATH"
    log_info "- KNOWN_HOSTS: (generated for $SSH_HOST)"
    log_info "- SSH_HOST: $SSH_HOST"
    log_info "- SSH_USER: $SSH_USER"
    log_info "- DEPLOY_PATH: $REMOTE_PATH"
    log_info "- PW_ROOT: $PW_ROOT"
    log_info "- GITHUB_OWNER: $GITHUB_OWNER"
    log_info "- GITHUB_REPO: $GITHUB_REPO"
}

upload_github_secrets_and_vars() {
    REPO_FULL="$GITHUB_OWNER/$GITHUB_REPO"
    ERRORS=0
    log_info "\nUploading repository secrets to GitHub..."
    CI_TOKEN="$(get_env_var "" CI_TOKEN "$ENV_FILE")"
    if [ -z "$CI_TOKEN" ]; then
        log_ask "Enter your CI_TOKEN (GitHub Personal Access Token for CI): "
        read -rs CI_TOKEN
        echo
    fi
    gh secret set CI_TOKEN --body "$CI_TOKEN" --repo "$REPO_FULL" || {
        log_error "Failed to set CI_TOKEN"
        ERRORS=$((ERRORS + 1))
    }
    GITHUB_ENV_API="/repos/$GITHUB_OWNER/$GITHUB_REPO/environments/$ENV"
    log_info "Ensuring GitHub environment '$ENV' exists..."
    gh api --method PUT -H "Accept: application/vnd.github+json" "$GITHUB_ENV_API" >/dev/null 2>&1 && log_ok "Environment '$ENV' ensured on GitHub." || log_error "Failed to create or access environment '$ENV' on GitHub."
    log_info "\nUploading environment variables to GitHub environment '$ENV'..."
    gh variable set SSH_HOST --env "$ENV" --body "$SSH_HOST" --repo "$REPO_FULL" || {
        log_error "Failed to set SSH_HOST"
        ERRORS=$((ERRORS + 1))
    }
    gh variable set SSH_USER --env "$ENV" --body "$SSH_USER" --repo "$REPO_FULL" || {
        log_error "Failed to set SSH_USER"
        ERRORS=$((ERRORS + 1))
    }
    gh variable set DEPLOY_PATH --env "$ENV" --body "$REMOTE_PATH" --repo "$REPO_FULL" || {
        log_error "Failed to set DEPLOY_PATH"
        ERRORS=$((ERRORS + 1))
    }
    gh variable set PW_ROOT --env "$ENV" --body "$PW_ROOT" --repo "$REPO_FULL" || {
        log_error "Failed to set PW_ROOT"
        ERRORS=$((ERRORS + 1))
    }
    gh variable set KNOWN_HOSTS --env "$ENV" --body "$KNOWN_HOSTS" --repo "$REPO_FULL" || {
        log_error "Failed to set KNOWN_HOSTS"
        ERRORS=$((ERRORS + 1))
    }
    log_info "\nUploading environment secrets to GitHub environment '$ENV'..."
    NO_COLOR=1 gh secret set SSH_KEY --env "$ENV" --body "$SSH_KEY_CONTENT" --repo "$REPO_FULL" || {
        log_error "Failed to set SSH_KEY"
        ERRORS=$((ERRORS + 1))
    }
    if [ $ERRORS -eq 0 ]; then
        log_ok "Environment variables and secrets upload complete."
    else
        log_error "Environment variables and secrets upload completed with $ERRORS error(s)."
    fi
    if [ $ERRORS -ne 0 ]; then
        log_error "There were $ERRORS error(s) during the process. Please review the messages above, fix any issues, and run the script again."
        exit 1
    fi
}

main "$@"
